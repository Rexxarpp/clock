C51 COMPILER V9.60.0.0   DS1302                                                            12/16/2020 21:49:36 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DS1302
OBJECT MODULE PLACED IN .\Objects\ds1302.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ds1302.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\ds
                    -1302.lst) OBJECT(.\Objects\ds1302.obj)

line level    source

   1          #include "ds1302.h"
   2          #include "spi.h"
   3          #include "delay.h"
   4          
   5          // 秒 分 时 日 月 周 年 写保护  充电
   6          unsigned char code write_cmd[] = {0x80, 0x82, 0x84, 0x86, 0x88, 0x8A, 0x8C, 0x8E, 0x90};
   7          //秒 分 时 日 月 周 年
   8          unsigned char code read_cmd[] = {0x81, 0x83, 0x85, 0x87, 0x89, 0x8B, 0x8D};
   9          
  10          //写入ram第一字节中的数据，用来判断系统是否掉过电
  11          unsigned char code protect_code[] = {0x9D, 0x4C, 0x70, 0xF0, 0x7C};
  12          unsigned char protect_code_len = 5;
  13          
  14          //  秒 分 时 日 月 周 年 写保护
  15          //BCD码表示 2020-09-14 8:58:12 7
  16          unsigned char time_buf[8] = {0x12, 0x58, 0x08, 0x14, 0x09, 0x07, 0x20, 0x80};
  17          unsigned char time_buf1[8] = {0x00, 0x58, 0x08, 0x14, 0x09, 0x07, 0x20, 0x80}; //时间修改完成后，回写ds130
             -2时用，不用上面那个是防止回写时被定时器改写
  18          
  19          #define BURST_WRITE 0xBE
  20          #define BURST_READ 0xBF
  21          #define BURST_WRITE_RAM 0xFE
  22          #define BURST_READ_RAM 0xFF
  23          
  24          extern unsigned char displayBuf[4];
  25          
  26          unsigned char check_protect_code(unsigned char* buf1, unsigned char* buf2, unsigned char len)
  27          {
  28   1              unsigned char i = 0;
  29   1              for(; i<len; i++)
  30   1              {
  31   2                      if(buf1[i] != buf2[i])
  32   2                      {
  33   3                              return 0;
  34   3                      }
  35   2              }
  36   1              return 1;
  37   1      }       
  38          void ds1302_init()
  39          {
  40   1              unsigned char i = 0;
  41   1              unsigned char read_protect_code[5];
  42   1              ds1302_write_byte(write_cmd[7], 0x00);//关闭写保护
  43   1              ds1302_write_byte(write_cmd[8], 0xA5);//充电，一个二极管，2K电阻
  44   1              ds1302_burst_read_ram(read_protect_code, protect_code_len);//0xC1 读取ram第中的数据的命令
  45   1              if(!check_protect_code(protect_code, read_protect_code, protect_code_len))
  46   1              {               
  47   2                      ds1302_burst_write_ram(protect_code, protect_code_len); //向ram中写入保护字
  48   2                      for (i = 0; i < 7; i++)
  49   2                      {
  50   3                              ds1302_write_byte(write_cmd[i], time_buf[i]);
  51   3                      }               
  52   2              }
  53   1              ds1302_write_byte(write_cmd[7], time_buf[7]);//打开写保护
C51 COMPILER V9.60.0.0   DS1302                                                            12/16/2020 21:49:36 PAGE 2   

  54   1      
  55   1      }
  56          
  57          void ds1302_burst_init()
  58          {
  59   1              unsigned char read_protect_code[5];
  60   1              ds1302_write_byte(write_cmd[7], 0x00);//关闭写保护
  61   1              ds1302_write_byte(write_cmd[8], 0xA5);//充电，0xAA两个二极管，4K电阻    0xA5 一个二极管，2K电阻
  62   1              ds1302_burst_read_ram(read_protect_code, protect_code_len);////0xC1 读取ram中的保护字
  63   1              if(!check_protect_code(protect_code, read_protect_code, protect_code_len))
  64   1              {               
  65   2                      ds1302_burst_write_ram(protect_code, protect_code_len); //向ram中写入保护字
  66   2                      ds1302_burst_write(time_buf); //初始化时间
  67   2              }
  68   1              else
  69   1              {
  70   2                      ds1302_write_byte(write_cmd[7], time_buf[7]);//打开写保护
  71   2              }       
  72   1      }
  73          
  74          
  75          
  76          
  77          void ds1302_read(unsigned char* buf)
  78          {
  79   1              unsigned char i = 0;
  80   1              for (; i < 7; i++)
  81   1              {
  82   2                      buf[i] = ds1302_read_byte(read_cmd[i]);
  83   2              }
  84   1      }
  85          
  86          void ds1302_write_byte(unsigned char cmd, unsigned char dat)
  87          {
  88   1              CE = 0;
  89   1              SCLK = 0;
  90   1              CE = 1;
  91   1              spi_write_byte(cmd);
  92   1              spi_write_byte(dat);
  93   1              CE = 0;
  94   1      }
  95          
  96          unsigned char ds1302_read_byte(unsigned char cmd)
  97          {
  98   1              unsigned char dat;
  99   1              IO = 0;//要加这句，不然读出的数据一次正常，一次不正常，读出0x7f,网上说他们读出oxff。
 100   1              //https://bbs.csdn.net/topics/390207271
 101   1              CE = 0;
 102   1              SCLK = 0;
 103   1              CE = 1;
 104   1              spi_write_byte(cmd);
 105   1              dat = spi_read_byte();
 106   1              CE = 0;
 107   1      
 108   1              return dat;
 109   1      }
 110          
 111          //burst模式，一次性写入8字节，命令是0xBE. buf[7]必须是0x80，以打开写保护
 112          //此函数不会关闭写保护，但会打开写保护，在调用此函数前需要手动关闭写保护
 113          void ds1302_burst_write(unsigned char* buf)
 114          {
 115   1              unsigned char i = 0;
C51 COMPILER V9.60.0.0   DS1302                                                            12/16/2020 21:49:36 PAGE 3   

 116   1              CE = 0;
 117   1              SCLK = 0;
 118   1              CE = 1;
 119   1              spi_write_byte(BURST_WRITE);//burst写命令
 120   1              for(; i < 8; i++)
 121   1              {
 122   2                      spi_write_byte(buf[i]); //最后一次循环打开写保护
 123   2              }
 124   1              CE = 0;
 125   1      }
 126          
 127          
 128          
 129          void ds1302_burst_read(unsigned char* buf)
 130          {
 131   1              unsigned char i = 0;
 132   1              CE = 0;
 133   1              SCLK = 0;
 134   1              CE = 1;
 135   1              spi_write_byte(BURST_READ);//burst读命令
 136   1              for(; i < 8; i++)
 137   1              {
 138   2                      buf[i] = spi_read_byte();
 139   2              }
 140   1              CE = 0;
 141   1              IO = 0;//要加这句，不然读出的数据一次正常，一次不正常，读出0x7f,网上说他们读出oxff。
 142   1      }
 143          
 144          void ds1302_burst_write_ram(unsigned char* buf, unsigned char write_len)
 145          {
 146   1              unsigned char i = 0;
 147   1              CE = 0;
 148   1              SCLK = 0;
 149   1              CE = 1;
 150   1              spi_write_byte(BURST_WRITE_RAM);//burst ram写命令
 151   1              for(; i < write_len; i++)
 152   1              {
 153   2                      spi_write_byte(buf[i]); //最后一次循环打开写保护
 154   2              }
 155   1              CE = 0;
 156   1      }
 157          
 158          void ds1302_burst_read_ram(unsigned char* buf, unsigned char read_len)
 159          {
 160   1              unsigned char i = 0;
 161   1              IO = 0;//要加这句，不然读出的数据一次正常，一次不正常，读出0x7f,网上说他们读出oxff。
 162   1              CE = 0;
 163   1              SCLK = 0;
 164   1              CE = 1;
 165   1              spi_write_byte(BURST_READ_RAM);//burst ram读命令
 166   1              for(; i < read_len; i++)
 167   1              {
 168   2                      buf[i] = spi_read_byte();
 169   2              }
 170   1              CE = 0;
 171   1              IO = 0;//要加这句，不然读出的数据一次正常，一次不正常，读出0x7f,网上说他们读出oxff。
 172   1      }
 173          
 174          
 175          unsigned char read1302(unsigned char add)
 176          {
 177   1              unsigned char i, dat, dat1;
C51 COMPILER V9.60.0.0   DS1302                                                            12/16/2020 21:49:36 PAGE 4   

 178   1              SCLK = 0;
 179   1              CE = 0;
 180   1              CE = 1;
 181   1              for(i = 0; i < 8; i++)
 182   1              {
 183   2                      IO = add&0x01;
 184   2                      add>>=1;
 185   2                      SCLK = 1;
 186   2                      SCLK = 0;
 187   2              }
 188   1              for(i = 0; i < 8; i++)
 189   1              {
 190   2                      dat1 = IO;
 191   2                      dat = (dat>>1)|(dat1<<7);
 192   2                      SCLK = 1;
 193   2                      SCLK = 0;
 194   2              }
 195   1              CE = 0;
 196   1              IO = 0;
 197   1              return dat;
 198   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    628    ----
   CONSTANT SIZE    =     21    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17      41
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
