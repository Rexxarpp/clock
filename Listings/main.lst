C51 COMPILER V9.60.0.0   MAIN                                                              11/29/2020 10:45:41 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "STC89C5xRC.H"
   2          #include "display.h"
   3          #include "hc595.h"
   4          #include "key.h"
   5          #include "delay.h"
   6          #include "ds1302.h"
   7          
   8          enum STATE{SYS_NORMAL = 0, SYS_SET_1 = 1, SYS_SET_2 = 2, SYS_SET_3 = 3, SYS_SET_4 = 4};
   9          extern unsigned char displayBuf[4];
  10          extern unsigned char code seg_code[32];
  11          extern unsigned char time_buf[8];
  12          extern unsigned char time_buf1[8];
  13          unsigned char key_state = KEY_NORMAL;
  14          enum STATE sys_state = SYS_NORMAL;
  15          unsigned char key_need_scan = 0;// 是否到达（定时器设定的）扫描按键 的时间
  16          unsigned char time_need_read = 0;//是否到达（定时器设定的）读取ds1302数据 的时间
  17          unsigned char not_disp_place = 4;
  18          
  19          void TimerInit(void);
  20          void Timer0Init(void);  
  21          void time_format(unsigned char* src, unsigned char* dest);
  22          
  23          void key_process();
  24          
  25          void main()
  26          {
  27   1              
  28   1              hc_595_init();
  29   1              TimerInit();
  30   1      //      ds1302_init();
  31   1              ds1302_burst_init();
  32   1      //      ds1302_burst_read(time_buf);//先读一次
  33   1      
  34   1      //      Timer0Init();
  35   1              while(1)
  36   1              {
  37   2                      key_process();
  38   2                      if(time_need_read)
  39   2                      {
  40   3      //                      ds1302_read(time_buf);//普通方式读整个buf,不包括写保护位
  41   3      //                      ds1302_burst_read(time_buf);//burst方式读取整个buf ,包括写保护位
  42   3                              time_buf[1] = ds1302_read_byte(0x83);//普通方式读分
  43   3                              time_buf[2] = ds1302_read_byte(0x85);//普通方式读时
  44   3                              
  45   3                              
  46   3                              time_format(time_buf, displayBuf);
  47   3                              time_need_read = 0;
  48   3                      }
  49   2              }
  50   1              
  51   1      }
  52          void time_format(unsigned char* src, unsigned char* dest) //把BCD码的时间转换成显示的时间,放入dest中
  53          {
  54   1              dest[0] = src[2] >> 4;
C51 COMPILER V9.60.0.0   MAIN                                                              11/29/2020 10:45:41 PAGE 2   

  55   1              dest[1] = (dest[1] &0x10) | (src[2] & 0x0F);
  56   1              dest[2] = src[1] >> 4;
  57   1              dest[3] = src[1] & 0x0f;
  58   1      }
  59          
  60          void time_format_reverse(unsigned char* src, unsigned char* dest)//把显示的时间转换成BCD码的时间, 放入dest
             -中
  61          {
  62   1              dest[2] = (src[0]<<4) | (src[1] & 0x0F);
  63   1              dest[1] = (src[2]<<4) | (src[3] & 0x0F);
  64   1      }
  65          
  66          
  67          void TimerInit(void)            //1毫秒@12.000MHz
  68          {
  69   1      //      AUXR &= 0xBF;           //定时器时钟12T模式
  70   1              TMOD &= 0x0F;           //设置定时器模式
  71   1              TMOD |= 0x10;           //设置定时器模式
  72   1              TL1 = 0x18;             //设置定时初值
  73   1              TH1 = 0xFC;             //设置定时初值
  74   1              TF1 = 0;                //清除TF1标志
  75   1              
  76   1              ET1 = 1;  //定时计数器1溢出中断允许控制位
  77   1              EA = 1;
  78   1              TR1 = 1;                //定时器1开始计时
  79   1      }
  80          
  81          //void Timer0Init(void)         //3毫秒@12.000MHz
  82          //{
  83          ////    AUXR &= 0x7F;           //定时器时钟12T模式
  84          //      TMOD &= 0xF0;           //设置定时器模式
  85          //      TMOD |= 0x01;           //设置定时器模式
  86          //      TL0 = 0x48;             //设置定时初值
  87          //      TH0 = 0xF4;             //设置定时初值
  88          //      TF0 = 0;                //清除TF0标志
  89          //      
  90          //      ET0 = 1;  //定时计数器1溢出中断允许控制位
  91          //      EA = 1;
  92          //      TR0 = 1;                //定时器0开始计时
  93          //}
  94          
  95          
  96          
  97          void timer1_ISR(void) interrupt 3 //interrupt 3为T1中断
  98          {
  99   1              static unsigned int a = 1;
 100   1              TL1 = 0x18;             //设置定时初值 1毫秒@12.000MHz
 101   1              TH1 = 0xFC;             //设置定时初值
 102   1      
 103   1              if( a%8 == 0)
 104   1              {
 105   2                      key_need_scan = 1;
 106   2              }
 107   1              if((sys_state == SYS_NORMAL))
 108   1              {
 109   2                      if(a%20 == 0)
 110   2                      {
 111   3                              time_need_read = 1;
 112   3                      }               
 113   2              }
 114   1              if (a++ == 500)   //长定时的方法
 115   1              {
C51 COMPILER V9.60.0.0   MAIN                                                              11/29/2020 10:45:41 PAGE 3   

 116   2                      switch(sys_state)
 117   2                      {
 118   3                              case SYS_NORMAL:
 119   3                                      not_disp_place = 4;
 120   3                                      displayBuf[1] ^= 0x10;
 121   3                                      break;
 122   3                              
 123   3                              case SYS_SET_1:
 124   3                                      if (not_disp_place !=0)
 125   3                                      {
 126   4                                              not_disp_place = 0;
 127   4                                      }
 128   3                                      else
 129   3                                      {
 130   4                                              not_disp_place = 4;
 131   4                                      }
 132   3                                      break;
 133   3                                      
 134   3                              case SYS_SET_2:
 135   3                                      displayBuf[1] &= 0x0f;
 136   3                                      if (not_disp_place !=1)
 137   3                                      {
 138   4                                              not_disp_place = 1;
 139   4                                      }
 140   3                                      else
 141   3                                      {
 142   4                                              not_disp_place = 4;
 143   4                                      }
 144   3                                      break;
 145   3                                      
 146   3                              case SYS_SET_3:
 147   3                                      if (not_disp_place !=2)
 148   3                                      {
 149   4                                              not_disp_place = 2;
 150   4                                      }
 151   3                                      else
 152   3                                      {
 153   4                                              not_disp_place = 4;
 154   4                                      }
 155   3                                      break;
 156   3                                      
 157   3                              case SYS_SET_4:
 158   3                                      if (not_disp_place !=3)
 159   3                                      {
 160   4                                              not_disp_place = 3;
 161   4                                      }
 162   3                                      else
 163   3                                      {
 164   4                                              not_disp_place = 4;
 165   4                                      }
 166   3                                      break;
 167   3                                      
 168   3                              default:
 169   3                                      break;
 170   3                      }
 171   2                      
 172   2                      a = 1;
 173   2              }
 174   1              display(not_disp_place);        
 175   1      }
 176          
 177          
C51 COMPILER V9.60.0.0   MAIN                                                              11/29/2020 10:45:41 PAGE 4   

 178          //void timer0_ISR(void) interrupt 1 //interrupt 1为T0中断
 179          //{
 180          //      static unsigned char b = 0;
 181          //      TR0 = 0;
 182          //      TL0 = 0x48;             //设置定时器初值 3毫秒@12.000MHz
 183          //      TH0 = 0xF4;    //设置定时器初值 3毫秒@12.000MHz
 184          //      key_need_scan = 1; //3毫秒扫描一次按键
 185          //      if(b++ == 20) //100毫秒读取一次ds1302时间
 186          //      {
 187          //              time_need_read = 1;
 188          //              b=0;
 189          //      }
 190          //      TR0 = 1;
 191          
 192          //}     
 193                  
 194          
 195          void key_process()
 196          {
 197   1              if(key_need_scan == 1)
 198   1              {
 199   2                      key_state = key_scan();
 200   2                      switch(key_state)
 201   2                      {
 202   3                              case KEY_SET_PRESSED:
 203   3                                      if(sys_state == SYS_SET_4)
 204   3                                      {
 205   4                                              sys_state = SYS_NORMAL;
 206   4                                              //将设置的时间数据回写ds1302
 207   4                                              time_format_reverse(displayBuf, time_buf1);
 208   4                                              ds1302_write_byte(0x8E, 0x00);  //关闭写保护
 209   4                                              ds1302_burst_write(time_buf1);                                  
 210   4                                      }
 211   3                                      else if(sys_state == SYS_SET_1)
 212   3                                      {
 213   4                                              sys_state++;
 214   4                                              if(displayBuf[0] == 2)
 215   4                                              {
 216   5                                                      if((displayBuf[1] | 0x0F) > 3)
 217   5                                                      {
 218   6                                                              displayBuf[1] = 0;
 219   6                                                      }
 220   5                                              }       
 221   4                                      }
 222   3                                      else
 223   3                                      {
 224   4                                              sys_state++;
 225   4                                      }
 226   3                                      break;
 227   3                              case KEY_ADJ_PRESSED:
 228   3                                      switch(sys_state)
 229   3                                      {
 230   4                                              case SYS_SET_1:
 231   4                                                      displayBuf[0]++;
 232   4                                                      displayBuf[0] %= 3;
 233   4                                                      break;
 234   4                                              case SYS_SET_2:
 235   4                                                      displayBuf[1] &= 0x0f;
 236   4                                                      displayBuf[1]++;
 237   4                                                      if (displayBuf[0] == 2)
 238   4                                                      {
 239   5                                                              displayBuf[1] %= 4;
C51 COMPILER V9.60.0.0   MAIN                                                              11/29/2020 10:45:41 PAGE 5   

 240   5                                                      }
 241   4                                                      else
 242   4                                                      {
 243   5                                                              displayBuf[1] %= 10;
 244   5                                                      }
 245   4                                                      break;
 246   4                                              case SYS_SET_3:
 247   4                                                      displayBuf[2]++;
 248   4                                                      displayBuf[2] %= 6;
 249   4                                                      break;
 250   4                                              case SYS_SET_4:
 251   4                                                      displayBuf[3]++;
 252   4                                                      displayBuf[3] %= 10;
 253   4                                                      break;
 254   4                                              default:
 255   4                                                      break;
 256   4                                      }
 257   3                                      break;
 258   3                                      default:
 259   3                                      break;
 260   3                              }
 261   2                              key_need_scan = 0;
 262   2                      }
 263   1      }
 264          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    647    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
